{"remainingRequest":"/home/runner/work/U2_Disenio_Planeacion_Formulacion_Proyectos/U2_Disenio_Planeacion_Formulacion_Proyectos/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/runner/work/U2_Disenio_Planeacion_Formulacion_Proyectos/U2_Disenio_Planeacion_Formulacion_Proyectos/src/views/curso/Tema1.vue?vue&type=template&id=5bf6de61&lang=pug&","dependencies":[{"path":"/home/runner/work/U2_Disenio_Planeacion_Formulacion_Proyectos/U2_Disenio_Planeacion_Formulacion_Proyectos/src/views/curso/Tema1.vue","mtime":1734370966859},{"path":"/home/runner/work/U2_Disenio_Planeacion_Formulacion_Proyectos/U2_Disenio_Planeacion_Formulacion_Proyectos/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U2_Disenio_Planeacion_Formulacion_Proyectos/U2_Disenio_Planeacion_Formulacion_Proyectos/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/runner/work/U2_Disenio_Planeacion_Formulacion_Proyectos/U2_Disenio_Planeacion_Formulacion_Proyectos/node_modules/pug-plain-loader/index.js","mtime":499162500000},{"path":"/home/runner/work/U2_Disenio_Planeacion_Formulacion_Proyectos/U2_Disenio_Planeacion_Formulacion_Proyectos/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U2_Disenio_Planeacion_Formulacion_Proyectos/U2_Disenio_Planeacion_Formulacion_Proyectos/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}